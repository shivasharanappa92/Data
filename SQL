Q1.select * from CITY where countrycode='USA' and population >100000;

Q2.select Name from CITY where countrycode='USA' and Population >120000;

Q3.Select * from CITY;

Q4.Select * from CITY where ID=1661

Q5. Select * from CITY where countrycode='JPN';

Q6.Select Name from CITY where Countrycode='JPN'

Q7.Select CITY,STATE from STATION;

Q8.Select Distinct CITY from STATION where (ID%2)=0;

Q9. Select count(city)-count(Distinct(CITY))as differenc from STATION;

Q10.(select CITY, length(CITY) as city_len from STATION order by city_len asc, CITY asc limit 1) union
    (select CITY, length(city) as city_len from STATION order by city_len desc, CITY asc limit 1);

Q11.  Select DISTINCT(Name) from City where Name regexp'^[aeiou]' ;

Q12.Select DISTINCT(NAME) from CITY where Name regexp'[aeiou]$';

Q13.Select DISTINCT(Name) from City where Name regexp'^[^aeiou]' ;

Q14. Select DISTINCT(NAME) from CITY where Name regexp'[^aeiou]$';

Q15.Select Distinct(Name) from CITY where  Name regexp'^[aeiou]' or Name regexp'[aeiou]$';

Q16.Select Distinct(Name) from CITY where  Name regexp'^[aeiou]' AND Name regexp'[aeiou]$';

Q17.Select PRODUCT_ID ,PRODUCT_NAME from PRODUCT AS P,SALES AS S WHERE P.PRODUCT_ID=S.PRODUCT_ID AND SALES_DATE between '2019-01-01' and '2019-03-31';

Q18.select id from VIEWS where author_id==viwer_id;

Q19.select round(100*r2.immediate_orders/count(d1.delivery_id), 2) as immediate_percentage
    from Delivery r1,
    (select count(order_date) as immediate_orders
    from Delivery 
    where (order_date = customer_pref_delivery_date)) r2
    
 Q20.  Select count(city)-count(Distinct(CITY))as differenc from STATION;
 
 Q21. select employee_id,count(team_id) over(partition by team_id order by employee_id)as team_size from employee;
 
 Q22. SELECT c.country_name,
       CASE
           WHEN AVG(w.weather_state * 1.0) <= 15.0 THEN 'Cold'
           WHEN AVG(w.weather_state * 1.0) >= 25.0 THEN 'Hot'
           ELSE 'Warm'
       END AS weather_type
      FROM Countries  c
      where  Weather  w ON c.country_id = w.country_id
      and w.day BETWEEN '2019-11-01' AND '2019-11-30'
      GROUP BY c.country_id;
Q23. select p.product_id, 
    round(sum(p.price * u.units)/sum(u.units), 2) as average_price
    from Prices p
    left join UnitsSold u
    on p.product_id = u.product_id and 
    datediff(u.purchase_date, p.start_date) >= 0 and
    datediff(p.end_date, u.purchase_date) >= 0
    group by p.product_id
  
 Q24. select player_id, min(event_date) as first_login
     from Activity 
     group by player_id;
     
 Q25. select player_id, device_id from Activity where Player_id inselect player_id, min(event_date) as first_login
     from Activity 
     group by player_id) ;
  
 Q26. select product_name, sum(o.unit)as unit from product c , orders o 
      where p.product_id=o.product_id and o.order_date between 2020-02-01 and 2020-02-29
      group by o.product_id having sum(o.units)>=100;
      
 Q27. SELECT *
     FROM Users
     WHERE REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com')
      
  Q28. select customer_id, name from Customers
       where customer_id IN (
       select a.customer_id from Orders AS a
        join Product AS b
        ON a.product_id = b.product_id
       where a.order_date BETWEEN '2020-06-01' and '2020-06-30'
        group bya.customer_id
       HAVING SUM(a.quantity * b.price) >= 100
       )
       and customer_id IN (
       select a.customer_id from Orders AS a
       JOIN Product AS b
        ON a.product_id = b.product_id
         where a.order_date BETWEEN '2020-07-01' and '2020-07-31'
        group bya.customer_id
        HAVING SUM(a.quantity * b.price) >= 100;
    
   Q29. select distinct title
        from Content 
        join TVProgram using(content_id)
        where kids_content = 'Y' 
	    and content_type = 'Movies' 
	    and (month(program_date), year(program_date)) = (6, 2020);
   
   Q30. select q.id, q.year, ifnull(n.npv,0) as npv
        from queries as q
        left join npv as n
        on (q.id, q.year) = (n.id, n.year)
        
   Q31. select unique_id, name from 
        EmployeeUNq en right join  employees e on en.id=e.id;
        
   Q32. select name, sum(ifnull(distance, 0)) as travelled_distance
        from rides r
        right join users u
       on r.user_id = u.id
       group by name
       order by  travelled_distance  desc, name asc;
       
       
   Q33. select product_name, sum(o.unit)as unit from product c , orders o 
      where p.product_id=o.product_id and o.order_date between 2020-02-01 and 2020-02-29
      group by o.product_id having sum(o.units)>=100;
      
   Q35. (select name results
        from Users
        left join Movie_Rating
         using (user_id)
         group by user_id
        order by count(rating) desc, name
        limit 1)

      union

      (select title
       from Movies
       left join Movie_Rating
       using(movie_id)
       where left(created_at,7) = '2020-02'
       group by movie_id
       order by avg(rating) desc, title
       limit 1)
   Q36. elect name, sum(ifnull(distance, 0)) as travelled_distance
        from rides r
        right join users u
       on r.user_id = u.id
       group by name
       order by  travelled_distance  desc, name asc;
       
  Q37.  select unique_id, name from 
        EmployeeUNq en right join  employees e on en.id=e.id;
        
        
  Q38. select s.id, s.name from Student s ,    
        Departments d where s.department_id<>d.id;
        
  Q39. wiht result as(select 
        case when from_id < to_id then from_id else to_id end as Person 1,
        case when from_id > to_id then from_id else to_id end as Person 2,
        duration
        from call)
        select person 1, person 2, count(1) as call_count,
        sum(duration) as total_dureation
        from result group by person 1, person 2;
        
        
     Q40. select p.product_id, 
    round(sum(p.price * u.units)/sum(u.units), 2) as average_price
     from Prices p
     left join UnitsSold u
      on p.product_id = u.product_id and 
      datediff(u.purchase_date, p.start_date) >= 0 and
       datediff(p.end_date, u.purchase_date) >= 0
       group by p.product_id;
       
   Q41. select name as warehouse_name, sum(units * vol) as volume
          from Warehouse w
           join (select product_id, Width*Length*Height as vol
            from Products) p
           on w.product_id = p.product_id
           group by name
           
 Q42. select a.sale_date, (a.sold_num - b.sold_num) as diff
       from Sales a left join Sales b
       on a.sale_date = b.sale_date
       where a.fruit = 'apples' and b.fruit = 'oranges'
       
       
  Q43. WITH CTE AS (
       SELECT
       player_id, min(event_date) as event_start_date
        from
        Activity
        group by player_id )

       SELECT
        round((count(distinct c.player_id) / (select count(distinct player_id) from activity)),2)as fraction
        FROM
      CTE c
       JOIN Activity a
       on c.player_id = a.player_id
        and datediff(c.event_start_date, a.event_date) = -1;
  Q44. select 
    a.dept_name,
    coalesce(count(student_id), 0) student_number
     from 
    department a 
     left join
      student b
       on 
      a.dept_id = b.dept_id
     group by a.dept_name
     order by student_number desc, a.dept_name asc;
     
     
  Q45. select customer_id
       from Customer
      group by customer_id
     having count(distinct product_key) = 
        (select count(distinct product_key) from Product)

Q46. select project_id, employee_id
      from Project
     join Employee
     using (employee_id)
    where (project_id, experience_years) in (
    select project_id, max(experience_years)
    from Project
    join Employee
    using (employee_id)
    group by project_id)
    
  Q47. select book_id, name 
     from books
      where book_id not in (
    select book_id 
    from orders 
    where (dispatch_date between date_sub('2019-06-23',interval 1 year) and '2019-06-23') 
    group by (book_id) 
    having sum(quantity) >= 10)
    and 
    available_from < date_sub('2019-06-23', interval 1 month)
    
  Q48.select student_id, min(course_id) as course_id, grade
     from Enrollments
      where (student_id, grade) in 
    (select student_id, max(grade)
    from Enrollments
    group by student_id)
    group by student_id
    order by student_id asc
 
 Q50. select group_id,player_id from 
     (select group_id,player_id,sum((
      case when player_id = first_player then first_score
         when player_id = second_player then second_score
         end
     )) as totalScores
    from Players p,Matches m
    where p.player_id = m.first_player
     or p.player_id = m.second_player
    group by group_id,player_id
   order by group_id,totalScores desc,player_id) as temp
   group by group_id
   order by group_id,totalScores desc,player_id
 
Q51. select a.sale_date, (a.sold_num - b.sold_num) as diff
       from Sales a left join Sales b
       on a.sale_date = b.sale_date
       where a.fruit = 'apples' and b.fruit = 'oranges'
       
Q52. Select Name from Customer where referee_id<>2;

Q53. select Name from customers c where id not in(select customerid from orders);

Q54. Select id, COUNT(TEAM_ID) over(partition by team_id) as team_size from employee  order by id;

Q55. select customer_id
       from Customer
      group by customer_id
     having count(distinct product_key) = 
        (select count(distinct product_key) from Product)

Q56. select player_id, device_id from Activity where Player_id inselect player_id, min(event_date) as first_login
     from Activity 
     group by player_id) ;
     
Q57. select
     customer_number 
     from
     (select customer_number, count(order_number) order_count 
      from orders group by customer_number) a 
      order by order_count desc limit 1;
      
 Q58. select c1.seat_id
      from cinema c1, cinema c2
       where ((c1.seat_id = c2.seat_id+1) or
       (c1.seat_id = c2.seat_id-1)) and 
       (c1.free = 1) and (c2.free = 1)
       group by c1.seat_id;
       
   Q59. select name
       from salesperson
       where sales_id
       not in (
       select s.sales_id from orders o
       inner join salesperson s ON o.sales_id = s.sales_id
        inner join company c ON o.com_id = c.com_id
         where c.name = 'RED'
          );
  Q60. select
     customer_number 
     from
     (select customer_number, count(order_number) order_count 
      from orders group by customer_number) a 
      order by order_count desc limit 1;
  
  Q61. select min(abs(p2.x-p1.x)) as shortest
        from point p1, point p2
        where p1.x != p2.x;
   
  Q62. SELECT actor_id, director_id
       FROM ActorDirector
       GROUP BY actor_id, director_id
       HAVING COUNT(*) >= 3;
       
  Q63. select p.product_name, s.year, s.price
       from Product p
        join Sales s
        on s.product_id = p.product_id;

 Q64. select project_id , round(avg(experience_years), 2) as average_years
     from project as p
     left join employee as e
     on p.employee_id = e.employee_id
     group by project_id;
 
 Q65. select a.seller_id
       from 
       (select seller_id, sum(price) as sum 
       from Sales
        group by seller_id) a 
        where a.sum = (select max(b.sum)from(select seller_id, sum(price) as sum 
        from Sales
        group by seller_id)b )

  Q66. select distinct buyer_id from Sales s
       join Product p
       on p.product_id = s.product_id
       where p.product_name = 'S8'
       and buyer_id not in
       (
        select buyer_id from Sales s
        join Product p on p.product_id = s.product_id
        where p.product_name = 'iPhone'
       );
       
   Q67. select c1.visited_on, sum(c2.amount) as amount, 
         round(avg(c2.amount), 2) as average_amount
         from (select visited_on, sum(amount) as amount 
         from customer group by visited_on) c1
         join (select visited_on, sum(amount) as amount 
         from customer group by visited_on) c2
         on datediff(c1.visited_on, c2.visited_on) between 0 and 6
         group by c1.visited_on
         having count(c2.amount) = 7;
	 
  Q68.select s1.gender, s1.day, sum(s2.score_points) as total from Scores s1, Scores s2
      where s1.gender = s2.gender and s1.day >= s2.day
      group by s1.gender, s1.day
      order by s1.gender, s1.day;
  
 Q69. select
      min(log_id) AS start_id,
      max(log_id) AS end_id
      from (select
      log_id,
      log_id - ROW_NUMBER() OVER (ORDER BY log_id) AS rk
      from Logs) t
      group by rk;
      
 Q70. select a.student_id, a.student_name, b.subject_name, count(c.subject_name) as attended_exams
       from Students as a
       join Subjects as b
       left join Examinations as c
       on a.student_id = c.student_id and b.subject_name = c.subject_name
       group by a.student_id, b.subject_name;
       
 Q71. select e3.employee_id from Employees e1, Employees e2, Employees e3
      where e1.manager_id = 1 and e2.manager_id = e1.employee_id and e3.manager_id = e2.employee_id and e3.employee_id != 1;
     
 Q72. SELECT
      Date_format(trans_date, '%Y-%m') AS month,
      country AS country,
      count(id) AS trans_count,
      SUM(case WHEN state = 'approved' THEN 1 ELSE 0 END) AS approved_count,
      SUM(amount) AS trans_total_amount,
      SUM(case WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_total_amount
       FROM
       transactions
       GROUP BY
       Date_format(trans_date, '%Y-%m') ,
       country;
       
 Q73. select round(avg(daily_count), 2) as average_daily_percent
      from (select count(distinct b.post_id)/count(distinct a.post_id)*100 as daily_count
       from actions a
       left join removals b
       on a.post_id = b.post_id
        where extra = 'spam'
        group by action_date
        ) b
	
 Q74. select
      min(log_id) AS start_id,
      max(log_id) AS end_id
      from (select
      log_id,
      log_id - ROW_NUMBER() OVER (ORDER BY log_id) AS rk
      from Logs) t
      group by rk;
      
 
 Q75. with CTE AS (
       select
        player_id, min(event_date) as event_start_date
        from
        Activity
         group by player_id )

       select
       round((count(distinct c.player_id) / (select count(distinct player_id) from activity)),2)as fraction
       from
        CTE c
        join Activity a
         on c.player_id = a.player_id
        and datediff(c.event_start_date, a.event_date) = -1;
	
 Q76. select Salaries.company_id, Salaries.employee_id, Salaries.employee_name, 
    round(case when salary_max<1000 then Salaries.salary
               when salary_max>=1000 and salary_max<=10000 then Salaries.salary * 0.76
               else Salaries.salary * 0.51 end, 0) as salary
          from Salaries inner join (
           select company_id, max(salary) as salary_max
           from Salaries
             group by company_id) as t
       on Salaries.company_id = t.company_id

Q77. select distinct Student.*
      from Student inner join Exam
      on Student.student_id = Exam.student_id
where student.student_id not in 
    (select e1.student_id
    from Exam as e1 inner join
        (select exam_id, min(score) as min_score, max(score) as max_score
        from Exam
        group by exam_id) as e2
    on e1.exam_id = e2.exam_id
    where e1.score = e2.min_score or e1.score = e2.max_score)
order by student_id;


Q78. select co.name AS country
      from person p
       inner join country co ON SUBSTRING(phone_number, 1, 3) = country_code
       inner join calls c ON (p.id = c.caller_id OR p.id = c.callee_id)
       Group by co.name
       having AVG(duration) > (select AVG(duration) as avg_duration from calls)
       ORDER BY NULL;
       
 Q79. Select name from Employee order by Name;
 
 Q80. select distinct username, activity, startDate, endDate
       from
       (select u.*,
           rank() over (partition by username order by startDate desc) as rnk,
           count(activity) over (partition by username) as num
        from UserActivity u) t
        where (num <> 1 and rnk = 2) or (num = 1 and rnk = 1)
 
 Q81. Select  NAME from STUDENTS where MARKS > 75 ORDER BY RIGHT(NAME,3), ID ASC;
 
 Q82.select name from employees where salary >2000 and month< 10 order by id;
  
 Q83. Select CASE
       WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
       WHEN A = B AND B = C THEN 'Equilateral'
       WHEN A = B OR B = C OR A = C THEN 'Isosceles'
       ELSE 'Scalene'
       END
       FROM TRIANGLES; 
 
 Q84. select max(months * salary), count(months * salary) 
      from Employee where (months * salary) 
      = (select max(months * salary) from Employee);
      
 Q85. SELECT (name || '(' || SUBSTR(occupation,1,1) || ')') FROM occupations ORDER BY name;
      SELECT ('There are a total of ' || COUNT(occupation) || ' ' || LOWER(occupation) || 's' || '.') 
      FROM occupations GROUP BY occupation ORDER BY COUNT(occupation), occupation ASC;
      
 Q86. Select Doctor, Professor, Singer, Actor FROM (
      Select ROW_NUMBER() OVER (PARTITION BY occupation ORDER BY name) as rn, name, occupation FROM       occupations) 
      Pivot
     (MAX(name) FOR occupation IN ('Doctor' as Doctor,'Professor' as Professor, 'Singer' as Singer, 'Actor' as Actor)) 
      ORDER BY rn;
 
 Q87.select  node,
     case when parent is null then 'Root'
     when node not in (select distinct parent from Binary_Tree where parent is not null) then 'Leaf'
     else 'Internal node' end as Type from binary_Tree;
     
     
 Q88. select *,((curr_year-pervision_year_amount) /pervision_year_amount * 100)as year_rate from 
      (select *,spend as curr_year,lag(spend,1) over(partition by transaction_i
       d order by year)as pervision_year_amount 
       from user_transactions)result;
       
       
  Q89.select a.user_id, a.status, d.paid
        from advertiser a
        left join daily_pay d
         using (user_id)
        UNION ALL
      select d.user_id, a.status, d.paid
        from advertiser a
       using daily_pay d
       using (user_id)
       WHERE a.user_id IS NULL
       
 Q90. select s1.gender, s1.day, sum(s2.score_points) as total from Scores s1, Scores s2
       where s1.gender = s2.gender and s1.day >= s2.day
      group by s1.gender, s1.day
       order by s1.gender, s1.day
       
  Q91. SELECT co.name AS country
       FROM person p
       INNER JOIN country co ON SUBSTRING(phone_number, 1, 3) = country_code
       INNER JOIN calls c ON (p.id = c.caller_id OR p.id = c.callee_id)
      GROUP BY co.name
      HAVING AVG(duration) > (SELECT AVG(duration) as avg_duration FROM calls)
       ORDER BY NULL;
       
   Q92. select t1.install_date as install_dt, count(t1.install_date) as installs,
         round(count(t2.event_date) / count(*), 2) as Day1_retention
         from (
          select player_id, min(event_date) as install_date
          from Activity
           group by 1
            ) t1
           left join Activity t2 
              on date_add(t1.install_date, interval 1 day) = t2.event_date
            and t1.player_id = t2.player_id
              group by 1
	      
  Q93. select group_id,player_id from 
        (select group_id,player_id,sum((
           case when player_id = first_player then first_score
         when player_id = second_player then second_score
         end
         )) as totalScores
          from Players p,Matches m
           where p.player_id = m.first_player
               or p.player_id = m.second_player
             group by group_id,player_id
            order by group_id,totalScores desc,player_id) as temp
             group by group_id
              order by group_id,totalScores desc,player_id
	      
 Q94.  select distinct Student.*
        from Student inner join Exam
          on Student.student_id = Exam.student_id
           where student.student_id not in 
            (select e1.student_id
             from Exam as e1 inner join
              (select exam_id, min(score) as min_score, max(score) as max_score
               from Exam
              group by exam_id) as e2
            on e1.exam_id = e2.exam_id
          where e1.score = e2.min_score or e1.score = e2.max_score)
         order by student_id
	
 

Q95. select distinct username, activity, startDate, endDate
         from
    (select u.*,
           rank() over (partition by username order by startDate desc) as rnk,
           count(activity) over (partition by username) as num
    from UserActivity u) t
where (num <> 1 and rnk = 2) or (num = 1 and rnk = 1);

Q96. select CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0','')))
from  EMPLOYEES

Q97.  select MAX(salary*months), COUNT(*) from Employee where (salary * months) >= (select MAX(salary * months) from employee);

Q98. select X, Y from (
      select X, Y from Functions where X=Y GROUP BY X, Y HAVING COUNT(*)=2
      UNION
      select f1.X, f1.Y from Functions f1, Functions f2 
      where f1.X < f1.Y 
      and f1.X=f2.Y 
       and f2.X=f1.Y
        )t
       ORDER BY X, Y;
       
   Q99. select S.hacker_id, name
         from SUBMISSIONS AS S
         join HACKERS AS H ON S.hacker_id = H.hacker_id
         join Challenges AS C ON S.challenge_id = C.challenge_id
          join Difficulty AS D ON C.difficulty_level = D.difficulty_level
         where S.score = D.score
          GROUP BY name, S.hacker_id
          HAVING count(S.challenge_id) > 1
           ORDER BY count(S.challenge_id) DESC, S.hacker_id
	   
Q100. select START_DATE, MIN(END_DATE)
      from
      (select START_DATE
      from PROJECTS
      where START_DATE NOT IN
       (select END_DATE
        from PROJECTS)) A,
       (select END_DATE
        from PROJECTS
       where END_DATE NOT IN
       (select START_DATE
        from PROJECTS)) B
     where START_DATE < END_DATE
     GROUP BY START_DATE
      ORDER BY (MIN(END_DATE) - START_DATE), START_DATE;
 
